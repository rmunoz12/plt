@setup
{

group b (Boards.Rect(3,3)) {
    three_in_a_row(int player) {
            for (l in {[[0,0], [1,0], [2,0]],
                 [[0,1], [1,1], [2,1]],
                 [[0,2], [1,2], [2,2]],
                 [[0,0], [0,1], [0,1]],
                 [[1,0], [1,1], [1,1]],
                 [[2,0], [2,1], [2,1]],
                 [[0,0], [1,1], [2,2]],
                 [[0,2], [1,1], [2,0]]})  {
                # Tests each line
                if (this.owns(b.toi(l[0])) == player and
                    this.owns(b.toi(l[1])) == player and
                    this.owns(b.toi(l[2])) == player) {
                    return True;
                }
                # owns checks the owner of a piece at an index,
                # and returns -1 if the space is empty
                }
            return False;
        }

        bool won (int player) { # checks if the player won
            if three_in_a_row(player) {
                return True;
            }
            return False;
        }
        
        bool draw() {
            if this.full() {
                return True;
            }
            return False;
        }

        assert draw() {
            this.full();
        }
    };

    

group Mark (Piece) {  # inherits from Piece
    fixed = True;   # piece cannot be overwritten

    str repr () { 
        if (this.owner == 0) { # this.owner is the id of the owner
            return 'X';
        } else {
            return 'Y';
        }
    }
};


N_PLAYERS = 2; # number of players, this default of 1
 

reset()
{
    str c;
    str c = "";
    while(c != "y" && c != "n") {
        print("Do you want to continue playing?\n");
        print("Type y to continue and n to exit\n");
        c = read(1);
    }
    if(c == "y") {
        restart();  # restarts the game
    } else {
        exit();     # exits from the game
    }
}

}


@turns
{

begin () {
    # this is basically just "while True" with only 1 phase
    # players input moves by typing coordinates, e.g. "11" or "02"
    print("Input coordinates of square to place")
    print("in i.e. \"22\" or \"10\".\n"); # prompts the players
    int a = stoi(read(1)); # reads one character and converts it to an int
    int c = stoi(read(1));
    if (Mark >> B [a,c]) {
        if (B.won(ON_MOVE)) { #ON_MOVE is the index of the player
            print("Player " + itos(ON_MOVE + 1) + " wins.\n");
            print("Congratulations!");
            reset();
        }
        if (B.draw()) {
            print("Game ends in a draw.\n");
            reset();
        }
        # if the move was legal, went through successfully,
        # and the game is not over, pass the turn to the next player
    }
}

}
