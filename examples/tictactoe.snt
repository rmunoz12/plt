@setup
{

list[group line] victory_conds;

group line(Object) {
    list[int] loci;

    func group line __init__(list[int] l) {
        this.loci = l;
        return this;
    }
};

group ttb(Rect(3, 3)) {

    # NOTE: Need to add a way to call INIT_CELLS since this segfaults
    # func group ttb __init__(list[group line] vc) {
    #     group Piece x = Piece();
    #     bool NO = false;
    #     this.x = 3; this.y = 3;
    #     this.victory_conds = vc;
    #     this.cells = [x, x, x, x, x, x, x, x, x];
    #     this.occupied = [NO, NO, NO, NO, NO, NO, NO, NO, NO];
    #     return this;
    # }

    assert owner_of_line(group line l, int player) {
        this.owns(l.loci[0]) == player;
        this.owns(l.loci[1]) == player;
        this.owns(l.loci[2]) == player;
    }

    func bool three_in_a_row(int player) {
        int i = 0;
        group line l;
        while (i < 8) {
            l = victory_conds[i];
            # print("DEBUG: three_in_a_row, i = "); print(i); print("\n");

            if (this.owner_of_line(l, player)) {
                return True;
            }
            i = i + 1;
        }
        return False;
        }

    func bool won(int player) {
        if (this.three_in_a_row(player)) {
            return True;
        }
        return False;
    }

    assert draw() {
        this.full();
    }

    func str __str_of_row(int row) {
        group Piece l; group Piece m; group Piece r;
        str ret;
        # print("DEUBG: start of __str_of_row with row = "); print(row); print("\n");
        # print("DEBUG: print [0, row] = "); print([0, row]); print("\n");
        l = this.cells[this.toi([0, row])];
        # print("DEBUG: l = this.cells call ok\n");
        m = this.cells[this.toi([1, row])];
        r = this.cells[this.toi([2, row])];
        ret = "[" + l.__repr__() + ", " + m.__repr__() + ", " + r.__repr__() + "]\n";
        return ret;
    }

    func str __repr__() {
        return this.__str_of_row(0) + this.__str_of_row(1) + this.__str_of_row(2);
    }
};



group Mark(Piece) {
    func group Mark __init__(str s, int player) {
        this.s = s;
        this.owner = player;
        return this;
    }
};


int N_PLAYERS = 2;

group ttb b;

}


@turns
{

func void begin() {
    group line v0; group line v1; group line v2; group line v3;
    group line v4; group line v5; group line v6; group line v7;
    int x; int y; int z;
    # list[group line] victory_conds;

    b = ttb();

    x = b.toi([0, 0]); y = b.toi([1, 0]); z = b.toi([2, 0]);
    v0 = line([x, y, z]);
    x = b.toi([0, 1]); y = b.toi([1, 1]); z = b.toi([2, 1]);
    v1 = line([x, y, z]);
    x = b.toi([0, 2]); y = b.toi([1, 2]); z = b.toi([2, 2]);
    v2 = line([x, y, z]);
    x = b.toi([0, 0]); y = b.toi([0, 1]); z = b.toi([0, 2]);
    v3 = line([x, y, z]);
    x = b.toi([1, 0]); y = b.toi([1, 1]); z = b.toi([1, 2]);
    v4 = line([x, y, z]);
    x = b.toi([2, 0]); y = b.toi([2, 1]); z = b.toi([2, 2]);
    v5 = line([x, y, z]);
    x = b.toi([0, 0]); y = b.toi([1, 1]); z = b.toi([2, 2]);
    v6 = line([x, y, z]);
    x = b.toi([0, 2]); y = b.toi([1, 1]); z = b.toi([2, 0]);
    v7 = line([x, y, z]);

    # print("DEBUG: v7 ok\n");

    victory_conds = [v0, v1, v2, v3, v4, v5, v6, v7];

    # print("DEBUG: built victory_conds\n");

    # b = ttb();

    # print("DEBUG: built b\n");

    pass(prompt, 0);
}

func void prompt() {
    int a;
    int c;
    group Mark m;
    int i;

    if (PLAYER_ON_MOVE % 2 == 0) {
        m = Mark("X", PLAYER_ON_MOVE);
    } else {
        m = Mark("O", PLAYER_ON_MOVE);
    }

    # print("DEBUG: start of prompt()\n");

    print("\n"); print(b); print("\n");

    # print("DEBUG: printed b\n");

    # players input moves by typing coordinates, e.g. "11" or "02"
    print("PLAYER "); print(PLAYER_ON_MOVE); print(": ");
    print("Input coordinates of square to place ");
    print("in i.e. \"22\" or \"10\".\n");
    a = stoi(read(1));
    c = stoi(read(1));
    clear_input();
    # print("index of input: ["); print(a); print(", "); print(c); print("] -> ");
    # print(b.toi([a, c])); print("\n");

    if (m >> b >> [a, c]) {

        # PLAYER_ON_MOVE is the index of the player
        if (b.won(PLAYER_ON_MOVE)) {
            pass(winner, PLAYER_ON_MOVE);
        }
        if (b.draw()) {
            pass(nowinner, PLAYER_ON_MOVE);
        }
    } else {
        # A piece is already at [a, c]
        print("Cannot place a mark there, try again.\n\n");
        pass(prompt, PLAYER_ON_MOVE);
    }
    # if the move was legal, went through successfully,
    # and the game is not over, pass the turn to the next player
    pass(prompt, (PLAYER_ON_MOVE + 1) % N_PLAYERS);
}

func void winner() {
    print("\n"); print(b); print("\n");
    print("Player "); print(PLAYER_ON_MOVE); print(" wins.\n");
    print("Congratulations!\n");
    end;
}

func void nowinner() {
    print("\n"); print(b); print("\n");
    print("Game ends in a draw.\n");
    end;
}

}
